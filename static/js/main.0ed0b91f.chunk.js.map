{"version":3,"sources":["components/Navigation.tsx","configs/parameters.ts","configs/routes.tsx","graph/stylers/color.ts","graph/stylers/circle-stroke.ts","graph/generate-links-map.ts","graph/generate-graph-data.ts","configs/texts.ts","common-types/SearchType.enum.ts","graph/graph-notification.tsx","configs/context.ts","graph/Flag.enum.ts","algos/helpers/visit-children-bfs.ts","algos/helpers/can-visit.ts","algos/helpers/flag.ts","graph/stylers/line-stroke-opacity.ts","graph/stylers/line-stroke-width.ts","graph/update-graph.ts","graph/Graph.class.ts","components/GraphSection.tsx","graph/render-graph-d3.ts","algos/dfs-progressive-algo.ts","algos/dfs-static-algo.ts","components/Legend.tsx","pages/DfsPage.tsx","algos/bfs-progressive-algo.ts","algos/bfs-static-algo.ts","pages/BfsPage.tsx","pages/AboutPage.tsx","pages/CompetitionPage.tsx","utils/theme-local-storage.ts","components/ErrorBoundary.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Navigation","routes","isMain","routesLinks","map","routeItem","i","url","umbrella","text","textMobile","icon","navText","className","to","activeClassName","isActive","match","location","pathname","COLOR","main","SubnodeOutlined","SisternodeOutlined","OneToOneOutlined","NodeIndexOutlined","dfs","bfs","dfsVsBfs","color","isVisited","isStart","isTarget","isObstacle","isBlocked","isPath","OBSTACLE","BLOCKED","PATH","VISITED","START_TARGET","COMMON","circleStroke","generateLinksMap","links","isCompetition","currIds","_sourceId","_targetId","source","target","id","sourceId","targetId","reduce","acc","curr","getRandomInt","min","max","Math","ceil","floor","random","generateGraphData","_targetNodeId","hasObstacles","n","nodes","Array","from","length","_","y","x","push","_linksMap","targetNodeId","linksMap","SearchType","texts","DFS","BFS","graphNotification","searchType","isSuccess","isDark","message","success","content","duration","key","CheckCircleFilled","style","onClick","destroy","warn","InfoCircleFilled","Flag","themes","ThemeContext","React","createContext","visitChildren","node","queue","currentNodeId","this","STEPS","newNode","canVisit","flag","parentId","prevNode","step","Step","RIGHT","graphSideLength","LEFT","flagType","currentLinkId","index","lineStrokeOpacity","lineStrokeWidth","updateGraph","svg","selectAll","data","join","attr","Graph","targetNode","isDfsGenerator","findPath","sqrt","_Step","_graphSideLength","DOWN","UP","GraphSection","props","useLocation","ref","useRef","useState","triggerRerender","setTriggerRerender","useContext","graphData","title","isProgressive","searchFunction","speed","state","scrollToTop","window","scrollTo","useEffect","graph","element","d3","append","simulation","force","strength","distance","iterations","SVG_GRAPH_WIDTH","SVG_GRAPH_HEIGHT","link","call","on","event","active","alphaTarget","restart","subject","fx","fy","drag","d","unmountGraph","stop","remove","renderGraph","current","interval","startTimeout","startSearch","thisGraph","startNode","iteration","setInterval","iterationNext","next","done","clearInterval","value","hasFound","setTimeout","clearTimeout","overviewList","CheckOutlined","dangerouslySetInnerHTML","__html","titleIcon","type","ghost","size","ReloadOutlined","depthFirstSearchProgressive","hasFoundPath","_depthFirstSearchProgressive","undefined","apply","depthFirstSearchStatic","currentStep","Legend","isEdgeCase","isOnlyForBfs","legendItems","filter","isOnlyForStaticDfs","legendItem","DepthFirstSearchPage","extraProps","breadthFirstSearchProgressive","parentNode","shift","breadthFirstSearchStatic","BreadthFirstSearchPage","AboutPage","description","StockOutlined","FundOutlined","whiteSpace","linkItems","linkItem","href","rel","slice","CompetitionPage","showLegend","JSON","parse","stringify","themeLocalStorage","localStorage","getItem","setIsDark","setItem","ErrorBoundary","hasError","bodyEl","document","getElementsByTagName","children","Component","App","Provider","prevIsDark","BulbFilled","path","GRAPH_SIDE_LENGTH","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0ed0b91f.chunk.js","sourcesContent":["import * as React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { AppRoute } from '../common-types/AppRoute.type';\nimport { ReactNode } from 'react';\n\ntype NavigationProps = {\n\troutes: AppRoute[],\n\tisMain?: boolean\n};\n\nexport function Navigation({ routes, isMain = false }: NavigationProps) {\n\tconst routesLinks: ReactNode[] = routes.map<ReactNode>((routeItem: AppRoute, i) => {\n\t\tconst { url, umbrella, text, textMobile, icon } = routeItem;\n\t\tconst navText = (() => {\n\t\t\tif (isMain) {\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<span className=\"nav-text is-mobile\">\n\t\t\t\t\t\t\t{icon}\n\t\t\t\t\t\t\t{textMobile}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<span className=\"nav-text is-desktop\">{text}</span>\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn text;\n\t\t})();\n\t\treturn(\n\t\t\t<NavLink\n\t\t\t\tkey={i}\n\t\t\t\tto={url}\n\t\t\t\tclassName=\"nav-link\"\n\t\t\t\tactiveClassName=\"is-active\"\n\t\t\t\tisActive={(match, location) => {\n\t\t\t\t\tif (isMain) {\n\t\t\t\t\t\tif (umbrella && location.pathname.match(umbrella)) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn !!match;\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{navText}\n\t\t\t</NavLink>\n\t\t);\n\t});\n\t\n\treturn <nav className={`nav${isMain ? ' is-main' : ' is-secondary'}`}>{routesLinks}</nav>;\n}\n","export const GRAPH_SIDE_LENGTH = 20;\n\n// DIFFICULTY >= 0, DIFFICULTY < 1\n// in the context of Math.random(),\n// determines the amount of obstacles\nexport const DIFFICULTY = 0.23;\n\nexport const SVG_GRAPH_WIDTH = 290;\nexport const SVG_GRAPH_HEIGHT = 290;\n\nexport const LINE_STROKE_WIDTH_PRIMARY = 2;\nexport const LINE_STROKE_WIDTH_SECONDARY = 0.5;\n\nexport const LINE_STROKE_OPACITY_PRIMARY = 1;\nexport const LINE_STROKE_OPACITY_SECONDARY = 0.5;\n\nexport const CIRCLE_RADIUS = 3;\n\nexport const SPEED = 150;\nexport const SPEED_FAST = 50;\nexport const START_TIMEOUT = 1200;\nexport const START_TIMEOUT_COMPETITION = 2200;\n\nexport enum COLOR {\n\tCOMMON = '#7b8f99', // Sidewalk Grey (colorsinspo)\n\tOBSTACLE = '#ff69af', // Ying Guang Se Pink (colorsinspo)\n\tVISITED = '#448ee4', // The oregon Blue (colorsinspo)\n\tBLOCKED = '#f5deb3', // Wheat (html5 color)\n\tPATH = '#bff128', // Yellowy Green (colorsinspo)\n\tSTART_TARGET = '#ff8833', // Wildfire (colorsinspo)\n}\n","import { NodeIndexOutlined, OneToOneOutlined, SisternodeOutlined, SubnodeOutlined } from '@ant-design/icons';\n\nexport const routes = {\n    main: [\n        { url: '/dfs/progressive', umbrella: '/dfs/', text: 'depth-first search', textMobile: 'dfs', icon: <SubnodeOutlined /> },\n        { url: '/bfs/progressive', umbrella: '/bfs/', text: 'breadth-first search', textMobile: 'bfs', icon: <SisternodeOutlined /> },\n        { url: '/dfs-vs-bfs/progressive', umbrella: '/dfs-vs-bfs/', text: 'dfs-vs-bfs', textMobile: 'vs', icon: <OneToOneOutlined /> },\n        { url: '/onboarding', text: 'onboarding', textMobile: 'about', icon: <NodeIndexOutlined /> }\n    ],\n    dfs: [\n        { url: '/dfs/progressive', text: 'progressive' },\n        { url: '/dfs/static', text: 'static' }\n    ],\n    bfs: [\n        { url: '/bfs/progressive', text: 'progressive' },\n        { url: '/bfs/static', text: 'static' }\n    ],\n    dfsVsBfs: [\n        { url: '/dfs-vs-bfs/progressive', text: 'progressive' },\n        { url: '/dfs-vs-bfs/static', text: 'static' },\n        { url: '/dfs-vs-bfs/edge-case-a', text: 'edge-case-1' },\n        { url: '/dfs-vs-bfs/edge-case-b', text: 'edge-case-2' }\n    ]\n};\n","import { COLOR } from '../../configs/parameters';\nimport { GraphNode } from '../interfaces/GraphNode.interface';\nimport { GraphLink } from '../interfaces/GraphLink.interface';\n\nexport function color({ isVisited, isStart, isTarget, isObstacle, isBlocked, isPath }: GraphNode | GraphLink): COLOR {\n\tif (isObstacle) return COLOR.OBSTACLE;\n\tif (isBlocked) return COLOR.BLOCKED;\n\tif (isPath) return COLOR.PATH;\n\tif (isVisited) return COLOR.VISITED;\n\tif (isStart || isTarget) return COLOR.START_TARGET;\n\treturn COLOR.COMMON;\n}\n","import { COLOR } from '../../configs/parameters';\nimport { GraphNode } from '../interfaces/GraphNode.interface';\n\nexport function circleStroke({ isStart, isTarget }: GraphNode): COLOR | null {\n\tif (isStart || isTarget) return COLOR.START_TARGET;\n\treturn null;\n}\n","import { GraphLink } from './interfaces/GraphLink.interface';\nimport { GraphNode } from './interfaces/GraphNode.interface';\nimport { LinksMap } from './interfaces/LinksMap.interface';\n\nexport function generateLinksMap(links: GraphLink[], isCompetition: boolean = false): LinksMap<GraphLink> {\n  // for competition pages where we need isolated data sets\n  // the links map is needed to be generated after\n  // d3s processes the data transforming `links` objects\n  // and changing its `source` and `target` fields\n  // from `number` to `GraphNode` object\n  const currIds = ({ source, target }: GraphLink) => {\n    let _sourceId, _targetId;\n    if (isCompetition) {\n      _sourceId = (source as GraphNode).id;\n      _targetId = (target as GraphNode).id;\n    } else {\n      _sourceId = source;\n      _targetId = target;\n    }\n    return {\n      sourceId: _sourceId,\n      targetId: _targetId\n    };\n  };\n\n  return links.reduce((acc, curr: GraphLink) => {\n    const { sourceId, targetId } = currIds(curr);\n    acc = { ...acc, [`${sourceId}-${targetId}`]: curr };\n    return acc;\n  }, {} as LinksMap<GraphLink>);\n}\n","import { GRAPH_SIDE_LENGTH, DIFFICULTY } from '../configs/parameters';\nimport { generateLinksMap } from './generate-links-map';\nimport { GraphNode } from './interfaces/GraphNode.interface';\nimport { GraphData } from './interfaces/GraphData.interface';\nimport { GraphLink } from './interfaces/GraphLink.interface';\n\n// MDN Web Docs - Math.random() article\nfunction getRandomInt(min: number, max: number): number {\n  // the maximum is exclusive\n  // and the minimum is inclusive\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nexport function generateGraphData(_targetNodeId?: number, hasObstacles: boolean = true): GraphData {\n  // data generation for graph is based upon example:\n  // https://observablehq.com/@d3/force-directed-lattice\n\n  const n = GRAPH_SIDE_LENGTH;\n  const nodes: GraphNode[] = Array.from({ length: n * n }, (_, i) => {\n    if (i === 0) {\n      return { id: i, isObstacle: false, isStart: true };\n    }\n    return { id: i, isObstacle: hasObstacles ? Math.random() < DIFFICULTY : false };\n  });\n\n  _targetNodeId = _targetNodeId || getRandomInt(200, nodes.length);\n  nodes[_targetNodeId].isObstacle = false;\n  nodes[_targetNodeId].isTarget = true;\n\n  const links: GraphLink[] = [];\n  for (let y = 0; y < n; ++y) {\n    for (let x = 0; x < n; ++x) {\n      if (y > 0) links.push({ source: (y - 1) * n + x, target: y * n + x });\n      if (x > 0) links.push({ source: y * n + (x - 1), target: y * n + x });\n    }\n  }\n\n  // create Map to faster access the needed link\n  // between two nodes inside the flag function\n  const _linksMap = generateLinksMap(links);\n\n  return { nodes, links, targetNodeId: _targetNodeId, linksMap: _linksMap };\n}\n","export const texts = {\n    DFS: [\n        'Finds <em>the first working path</em> (not&nbsp;necessarily&nbsp;the&nbsp;shortest&nbsp;one)',\n        'The further the target node is the faster it&nbsp;will&nbsp;generally&nbsp;find&nbsp;it',\n        'The bottleneck in terms of space for Dfs is the&nbsp;<a href=\"/#/dfs-vs-bfs/edge-case-a\"><em>recursive&nbsp;functions&nbsp;call&nbsp;stack</em></a>, ' +\n        'here&nbsp;it&nbsp;can&nbsp;reach&nbsp;N&nbsp;max',\n        'Suitable for decision exploring trees (eg. in gaming), or&nbsp;for&nbsp;visiting&nbsp;the&nbsp;entire&nbsp;graph'\n    ],\n    BFS: [\n        'Finds <em>the shortest path</em>',\n        'The closer the target node is the faster it will&nbsp;find&nbsp;it',\n        'The bottleneck in terms of space for Bfs is the <a href=\"/#/dfs-vs-bfs/edge-case-b\"><em>queue</em></a>, ' +\n        'here&nbsp;it&nbsp;can&nbsp;reach&nbsp;&Sqrt;N&nbsp;max',\n        'Used for finding the neighbouring nodes (eg.&nbsp;in&nbsp;network&nbsp;broadcasting,&nbsp;gps)'\n    ]\n};\n","export enum SearchType {\n    DFS = 'DFS',\n    BFS = 'BFS'\n}\n","import { message } from 'antd';\nimport { CheckCircleFilled, InfoCircleFilled } from '@ant-design/icons';\nimport { COLOR } from '../configs/parameters';\nimport { SearchType } from '../common-types/SearchType.enum';\n\nexport function graphNotification(searchType: SearchType, isSuccess: boolean, isCompetition: boolean, isDark: boolean): void {\n\tconst duration = 2;\n\n\tif (isSuccess) {\n\t\tif (searchType === SearchType.DFS) {\n\t\t\tmessage.success({\n\t\t\t\tcontent: `A path has been found${isCompetition ? ' by DFS' : ''}`,\n\t\t\t\tduration: duration,\n\t\t\t\tkey: 'dfs-success',\n\t\t\t\tclassName: isDark ? 'message-dark' : '',\n\t\t\t\ticon: <CheckCircleFilled style={{color: COLOR.PATH}} />,\n\t\t\t\tonClick: () => {\n\t\t\t\t\tmessage.destroy('dfs-success');\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif (searchType === SearchType.BFS) {\n\t\t\tmessage.success({\n\t\t\t\tcontent: `The shortest path has been found${isCompetition ? ' by BFS' : ''}`,\n\t\t\t\tduration: duration,\n\t\t\t\tkey: 'bfs-success',\n\t\t\t\tclassName: isDark ? 'message-dark' : '',\n\t\t\t\ticon: <CheckCircleFilled style={{color: COLOR.PATH}} />,\n\t\t\t\tonClick: () => {\n\t\t\t\t\tmessage.destroy('bfs-success');\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t} else {\n\t\tif (searchType === SearchType.DFS) {\n\t\t\tmessage.warn({\n\t\t\t\tcontent: `Too many obstacles${isCompetition ? ' for DFS' : ''}, please, reload the graph`,\n\t\t\t\tduration: duration,\n\t\t\t\tkey: 'dfs-warn',\n\t\t\t\tclassName: isDark ? 'message-dark' : '',\n\t\t\t\ticon: <InfoCircleFilled style={{color: COLOR.BLOCKED}} />,\n\t\t\t\tonClick: () => {\n\t\t\t\t\tmessage.destroy('dfs-warn');\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif (searchType === SearchType.BFS) {\n\t\t\tmessage.warn({\n\t\t\t\tcontent: `Too many obstacles${isCompetition ? ' for BFS' : ''}, please, reload the graph`,\n\t\t\t\tduration: duration,\n\t\t\t\tkey: 'bfs-warn',\n\t\t\t\tclassName: isDark ? 'message-dark' : '',\n\t\t\t\ticon: <InfoCircleFilled style={{color: COLOR.BLOCKED}} />,\n\t\t\t\tonClick: () => {\n\t\t\t\t\tmessage.destroy('bfs-warn');\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n}\n","import React from 'react';\n\nexport const themes = { isDark: false };\nexport const ThemeContext = React.createContext(themes);\n","export enum Flag {\n    isVisited = 'isVisited',\n    isStart = 'isStart',\n    isTarget = 'isTarget',\n    isObstacle = 'isObstacle',\n    isBlocked = 'isBlocked',\n    isPath = 'isPath'\n}\n","import { GraphNode } from '../../graph/interfaces/GraphNode.interface';\nimport { Graph } from '../../graph/Graph.class';\nimport { Flag } from '../../graph/Flag.enum';\n\nexport type VisitChildrenSignature = (node: GraphNode, queue: GraphNode[]) => boolean;\n\nexport function visitChildren(this: Graph, node: GraphNode, queue: GraphNode[]): boolean {\n\tconst currentNodeId = node.id;\n\n\tfor (let i = 0; i < this.STEPS.length; i++) {\n\t\tconst newNode: GraphNode = this.nodes[currentNodeId + this.STEPS[i]];\n\t\tif (this.canVisit(newNode, node, this.STEPS[i])) {\n\t\t\tthis.flag(newNode, node, Flag.isVisited);\n\t\t\tnewNode.parentId = node.id;\n\t\t\tqueue.push(newNode);\n\t\t\tif (newNode.isTarget) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn false;\n}\n","import { GraphNode } from '../../graph/interfaces/GraphNode.interface';\nimport { Graph } from '../../graph/Graph.class';\n\nexport function canVisit(\n\tthis: Graph,\n\t// `undefined` value for `node` field is possible here when the index\n\t// of the new node (based on Step) is out of bounds of existing nodes array.\n\t// we can rely on the `undefined` here because all the values inside\n\t// the nodes array are known. checking the new index versus the array length\n\t// beforehand would be redundant in this case. it can be done in JavaScript\n\t// because it doesn't have the concept of \"out of bounds\" array indexes\n\tnode: GraphNode | undefined,\n\tprevNode: GraphNode | undefined,\n\tstep: number | undefined\n): boolean {\n\tif (!node) {\n\t\treturn false;\n\t}\n\n\tif (step === this.Step.RIGHT && node.id % this.graphSideLength === 0) {\n\t\treturn false;\n\t}\n\t\n\tif (step === this.Step.LEFT && (prevNode as GraphNode).id % this.graphSideLength === 0) {\n\t\treturn false;\n\t}\n\t\n\treturn !(node.isVisited || node.isObstacle);\n}\n","import { GraphNode } from '../../graph/interfaces/GraphNode.interface';\nimport { Flag } from '../../graph/Flag.enum';\nimport { Graph } from '../../graph/Graph.class';\n\nexport function flag(this: Graph, node: GraphNode, prevNode: GraphNode | undefined, flagType: Flag): void {\n\tif (prevNode) {\n\t\t// because `linksMap` is generated based on links objects array via reduce method\n\t\t// (`generateLinksMap` function), objects inside the `links` array and the `linksMap`\n\t\t// are actually the same in memory, it is just the pointers to them that are different\n\t\t// (indexes in `links` array, and keys in `linksMap`), that's why mutating `linksMap` objects\n\t\t// will in turn modify the `links` objects as well, thus it's possible just to use that\n\t\t// to flag the needed `currentLink`, like this:\n\n\t\t// const currentLink = this.linksMap[`${node.id}-${prevNode.id}`] || this.linksMap[`${prevNode.id}-${node.id}`];\n\t\t// currentLink[flagType] = true;\n\n\t\t// but it feels like oblique and not immediately obvious behavior,\n\t\t// so to make this (rather critical) piece of code more explicit,\n\t\t// and separate concerns of `links` and `linksMap`,\n\t\t// I chose to use the `linksMap` only to obtain the index of currentLink\n\t\t// whereas the `links` array is predictably used\n\t\t// for finding the corresponding link and flagging it\n\n\t\tconst currentLinkId = (this.linksMap[`${node.id}-${prevNode.id}`] || this.linksMap[`${prevNode.id}-${node.id}`]).index;\n\t\tconst currentLink = this.links[currentLinkId as number];\n\t\tcurrentLink[flagType] = true;\n\t}\n\tnode[flagType] = true;\n}\n","import { LINE_STROKE_OPACITY_PRIMARY, LINE_STROKE_OPACITY_SECONDARY } from '../../configs/parameters';\nimport { GraphLink } from '../interfaces/GraphLink.interface';\n\nexport function lineStrokeOpacity({ isVisited, isTarget, isObstacle, isBlocked, isPath  }: GraphLink): number {\n\tif (isVisited || isTarget || isObstacle || isBlocked || isPath ) {\n\t\treturn LINE_STROKE_OPACITY_PRIMARY;\n\t}\n\t\n\treturn LINE_STROKE_OPACITY_SECONDARY;\n}\n","import { LINE_STROKE_WIDTH_PRIMARY, LINE_STROKE_WIDTH_SECONDARY } from '../../configs/parameters';\nimport { GraphLink } from '../interfaces/GraphLink.interface';\n\nexport function lineStrokeWidth({ isVisited, isTarget, isObstacle, isBlocked, isPath }: GraphLink): number {\n\tif (isVisited || isTarget || isObstacle || isBlocked || isPath ) {\n\t\treturn LINE_STROKE_WIDTH_PRIMARY;\n\t}\n\t\n\treturn LINE_STROKE_WIDTH_SECONDARY;\n}\n","import { Selection } from 'd3';\nimport { color } from './stylers/color';\nimport { lineStrokeOpacity } from './stylers/line-stroke-opacity';\nimport { lineStrokeWidth } from './stylers/line-stroke-width';\nimport { Graph } from './Graph.class';\n\nexport function updateGraph(this: Graph, svg: Selection<SVGSVGElement, unknown, null, undefined>): void {\n    svg.selectAll('line')\n        .data(this.links)\n        .join('line')\n        .attr('stroke', color)\n        .attr('stroke-opacity', lineStrokeOpacity)\n        .attr('stroke-width', lineStrokeWidth);\n\n    svg.selectAll('circle')\n        .data(this.nodes)\n        .join('circle')\n        .attr('fill', color);\n}\n","import { visitChildren, VisitChildrenSignature } from '../algos/helpers/visit-children-bfs';\nimport { GraphNode } from './interfaces/GraphNode.interface';\nimport { SearchType } from '../common-types/SearchType.enum';\nimport { GraphLink } from './interfaces/GraphLink.interface';\nimport { LinksMap } from './interfaces/LinksMap.interface';\nimport { FindPathSignature, FindPathWrapperSignature } from '../algos/signatures/FindPathSignature';\nimport { canVisit } from '../algos/helpers/can-visit';\nimport { flag } from '../algos/helpers/flag';\nimport { updateGraph } from './update-graph';\n\n// `nodes` and `links` (and `targetNode` for bfs) are dependencies\n// that are used in every search function.\n// to avoid explicitly injecting them every time\n// as arguments for wrapper function when we call it\n// as `searchFunction(nodes, links, targetNode)(startNode)`,\n// I decided to abstract them out to `Graph` object constructor (class)\n// to use them as `this.nodes` and `this.links` inside search function itself,\n// that is attached to the `findPath` method during a new Graph object instantiation\nclass Graph {\n    nodes: GraphNode[];\n    links: GraphLink[];\n    linksMap: LinksMap<GraphLink>;\n    targetNode: GraphNode;\n    findPath: FindPathSignature;\n    visitChildren?: VisitChildrenSignature;\n    graphSideLength: number;\n\n    constructor(\n        nodes: GraphNode[],\n        links: GraphLink[],\n        linksMap: LinksMap<GraphLink>,\n        targetNode: GraphNode,\n        isDfsGenerator: boolean = false,\n        findPath: FindPathSignature,\n        searchType: SearchType\n) {\n        this.nodes = nodes;\n        this.links = links;\n        this.linksMap = linksMap;\n        this.targetNode = targetNode;\n        this.graphSideLength = Math.sqrt(nodes.length);\n        // for dfs-progressive algo there is a wrapper function\n        // that holds a closure variable that is used inside the algo\n        this.findPath = isDfsGenerator ? (findPath as FindPathWrapperSignature)() : findPath;\n        if (searchType === SearchType.BFS) {\n            this.visitChildren = visitChildren;\n        }\n    }\n\n    canVisit = canVisit;\n    flag = flag;\n    updateGraph = updateGraph;\n\n    get Step() {\n        const _graphSideLength = this.graphSideLength;\n        enum _Step {\n            RIGHT = 1,\n            DOWN = _graphSideLength,\n            LEFT = -1,\n            UP = -_graphSideLength\n        }\n        return _Step;\n    }\n\n    get STEPS(): [\n        number,\n        number,\n        number,\n        number\n    ] {\n        return [\n            this.Step.RIGHT,\n            this.Step.DOWN,\n            this.Step.LEFT,\n            this.Step.UP\n        ];\n    };\n}\n\nexport { Graph };\n","import * as React from 'react';\nimport { useState, useEffect, useRef, useContext, ReactNode } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { Button, message } from 'antd';\nimport { ReloadOutlined, CheckOutlined, SubnodeOutlined, SisternodeOutlined } from '@ant-design/icons';\nimport { renderGraph } from '../graph/render-graph-d3';\nimport { START_TIMEOUT, START_TIMEOUT_COMPETITION, SPEED } from '../configs/parameters';\nimport { Navigation } from './Navigation';\nimport { texts } from '../configs/texts';\nimport { graphNotification } from '../graph/graph-notification';\nimport { ThemeContext } from '../configs/context';\nimport { Graph } from '../graph/Graph.class';\nimport { generateLinksMap } from '../graph/generate-links-map';\nimport { SearchType } from '../common-types/SearchType.enum';\nimport { GraphNode } from '../graph/interfaces/GraphNode.interface';\nimport { GraphData } from '../graph/interfaces/GraphData.interface';\nimport { AppRoute } from '../common-types/AppRoute.type';\nimport { FindPathSignature } from '../algos/signatures/FindPathSignature';\n\ntype GraphSectionProps = {\n\ttitle: string;\n\tgraphData?: GraphData;\n\tisCompetition?: boolean;\n\troutes: AppRoute[];\n\tsearchType: SearchType,\n\tsearchFunction: FindPathSignature,\n\tisProgressive?: boolean,\n\tisDfsGenerator?: boolean,\n\tspeed?: number\n};\n\ntype LocationCustomState = {\n\tscrollToTop: boolean\n};\n\nexport function GraphSection(props: GraphSectionProps) {\n\tconst location = useLocation<LocationCustomState>();\n\tconst ref = useRef<HTMLDivElement>(null);\n\tconst [ triggerRerender, setTriggerRerender ] = useState(0);\n\tconst { isDark } = useContext(ThemeContext);\n\n\tconst {\n\t\tisDfsGenerator,\n\t\tgraphData,\n\t\tisCompetition = false,\n\t\ttitle,\n\t\tisProgressive = true,\n\t\tsearchFunction,\n\t\troutes,\n\t\tsearchType,\n\t\tspeed\n\t} = props;\n\n\tif (location.state && location.state.scrollToTop) {\n\t\twindow.scrollTo(0, 0);\n\t}\n\t\n\tconst reloadGraph = () => {\n\t\tsetTriggerRerender(triggerRerender => ++triggerRerender);\n\t};\n\t\n\tuseEffect(() => {\n\t\tconst graph = renderGraph(ref.current, graphData);\n\t\tconst { svg, nodes, links, targetNode, linksMap, unmountGraph } = graph;\n\n\t\tlet _linksMap;\n\t\tif (!linksMap) {\n\t\t\t// create Map to faster access the needed link\n\t\t\t// between two nodes inside the flag function\n\t\t\t_linksMap = generateLinksMap(links, true);\n\t\t} else {\n\t\t\t_linksMap = linksMap;\n\t\t}\n\n\t\tconst thisGraph = new Graph(nodes, links, _linksMap, targetNode, isDfsGenerator, searchFunction, searchType);\n\t\t\n\t\tlet interval: NodeJS.Timeout;\n\t\tlet startTimeout: NodeJS.Timeout;\n\t\tlet startSearch: (startNode: GraphNode) => void;\n\n\t\tif (isProgressive) {\n\t\t\tstartSearch = (startNode: GraphNode) => {\n\t\t\t\tconst iteration = thisGraph.findPath(startNode) as Generator;\n\t\t\t\t\n\t\t\t\tinterval = setInterval(() => {\n\t\t\t\t\tconst iterationNext = iteration.next();\n\n\t\t\t\t\tthisGraph.updateGraph(svg);\n\n\t\t\t\t\tif (iterationNext.done) {\n\t\t\t\t\t\tclearInterval(interval);\n\t\t\t\t\t\tgraphNotification(searchType, iterationNext.value, isCompetition, isDark);\n\t\t\t\t\t}\n\t\t\t\t}, speed || SPEED);\n\t\t\t}\n\t\t\t\n\t\t} else {\n\t\t\tstartSearch = (startNode: GraphNode) => {\n\t\t\t\tconst hasFound = thisGraph.findPath(startNode) as boolean;\n\n\t\t\t\tgraphNotification(searchType, hasFound, isCompetition, isDark);\n\n\t\t\t\tthisGraph.updateGraph(svg);\n\t\t\t}\n\t\t}\n\n\t\t// waiting until the graph is build\n\t\tstartTimeout = setTimeout(() => {\n\t\t\tstartSearch(nodes[0]);\n\t\t}, isCompetition ? START_TIMEOUT_COMPETITION : START_TIMEOUT);\n\t\t\n\t\treturn () => {\n\t\t\tstartTimeout && clearTimeout(startTimeout);\n\t\t\tinterval && clearInterval(interval);\n\t\t\tmessage.destroy();\n\t\t\tunmountGraph();\n\t\t}\n\t}, [\n\t\ttriggerRerender,\n\t\tgraphData,\n\t\tisDark,\n\t\t// the following deps are not actually being changed over time\n\t\t// but are included here as recommended by React docs\n\t\t// because they are from outer scope of useEffect and are used by useEffect\n\t\tisCompetition,\n\t\tisDfsGenerator,\n\t\tisProgressive,\n\t\tsearchFunction,\n\t\tsearchType,\n\t\tspeed\n\t]);\n\t\n\tconst overviewList: ReactNode[] = texts[searchType].map<ReactNode>((text: string, i) => {\n\t\treturn (\n\t\t\t<p key={i}>\n\t\t\t\t<CheckOutlined style={{color: '#bff128'}} />{' '}\n\t\t\t\t<span dangerouslySetInnerHTML={{__html: text}} />\n\t\t\t</p>\n\t\t);\n\t});\n\n\tconst titleIcon = () => {\n\t\tswitch(searchType) {\n\t\t\tcase 'DFS': return <SubnodeOutlined className=\"title-icon\" />;\n\t\t\tcase 'BFS': return <SisternodeOutlined className={`title-icon${isCompetition ? ' is-bfs' : ''}`} />;\n\t\t\tdefault: return null;\n\t\t}\n\t};\n\t\n\treturn(\n\t\t<section className=\"graph-section\">\n\t\t\t<div className=\"graph-section-header\">\n\t\t\t\t{!isCompetition && <>{titleIcon()}<br /></>}\n\t\t\t\t<h2 className=\"title\">\n\t\t\t\t\t{isCompetition && titleIcon()}\n\t\t\t\t\t{title}\n\t\t\t\t\t{!isCompetition &&\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\ttype=\"primary\"\n\t\t\t\t\t\t\tghost={!isDark}\n\t\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\t\tclassName=\"btn-reload\"\n\t\t\t\t\t\t\ticon={<ReloadOutlined />}\n\t\t\t\t\t\t\tonClick={reloadGraph}\n\t\t\t\t\t\t\ttitle=\"Reload graph\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tReload\n\t\t\t\t\t\t</Button>}\n\t\t\t\t</h2>\n\t\t\t\t{!isCompetition && <Navigation routes={routes} />}\n\t\t\t</div>\n\t\t\t<article className=\"graph-article\">{overviewList}</article>\n\t\t\t<div className=\"graph-wrapper\" ref={ref} />\n\t\t</section>\n\t);\n}\n","import * as d3 from 'd3';\nimport { Simulation } from 'd3-force';\nimport {\n\tSVG_GRAPH_WIDTH,\n\tSVG_GRAPH_HEIGHT,\n\tCIRCLE_RADIUS,\n\tLINE_STROKE_OPACITY_SECONDARY\n} from '../configs/parameters';\nimport { color } from './stylers/color';\nimport { circleStroke } from './stylers/circle-stroke';\nimport { generateGraphData } from './generate-graph-data';\nimport { GraphData } from './interfaces/GraphData.interface';\nimport { GraphNode } from './interfaces/GraphNode.interface';\nimport { GraphLink } from './interfaces/GraphLink.interface';\nimport { RenderGraphD3 } from './types/RenderGraphD3.type';\nimport { DragEventD3 } from './types/DragEvent.type';\n\nexport function renderGraph(element: HTMLDivElement | null, graphData?: GraphData): RenderGraphD3 {\n\t// d3 forced graph rendering is based upon example:\n\t// https://observablehq.com/@d3/force-directed-lattice\n\n\tconst data = graphData || generateGraphData();\n\t\n\tconst svg = d3.select(element)\n\t\t.append('svg')\n\t\t.attr('class', 'graph-svg')\n\t\t.attr('viewBox', `0, 0, ${SVG_GRAPH_WIDTH}, ${SVG_GRAPH_HEIGHT}`)\n\t\t.attr('transform', 'rotate(-2.3)');\n\t\n\tconst nodes = data.nodes;\n\tconst links = data.links;\n\tconst targetNodeId = data.targetNodeId;\n\tconst linksMap = data.linksMap;\n\n\tconst simulation = d3.forceSimulation<GraphNode, GraphLink>(nodes)\n\t\t.force('link', d3.forceLink(links).strength(1.1).distance(10).iterations(20))\n\t\t.force('charge', d3.forceManyBody().strength(-5))\n\t\t.force('center', d3.forceCenter(SVG_GRAPH_WIDTH / 2, SVG_GRAPH_HEIGHT / 2));\n\n\tconst drag = (simulation: Simulation<GraphNode, GraphLink>) => {\n\t\tfunction dragstarted(event: DragEventD3) {\n\t\t\tif (!event.active) simulation.alphaTarget(0.3).restart();\n\t\t\tevent.subject.fx = event.subject.x;\n\t\t\tevent.subject.fy = event.subject.y;\n\t\t}\n\n\t\tfunction dragged(event: DragEventD3) {\n\t\t\tevent.subject.fx = event.x;\n\t\t\tevent.subject.fy = event.y;\n\t\t}\n\n\t\tfunction dragended(event: DragEventD3) {\n\t\t\tif (!event.active) simulation.alphaTarget(0);\n\t\t\tevent.subject.fx = null;\n\t\t\tevent.subject.fy = null;\n\t\t}\n\t\t\n\t\treturn d3.drag<SVGCircleElement, GraphNode>()\n\t\t\t.on('start', dragstarted)\n\t\t\t.on('drag', dragged)\n\t\t\t.on('end', dragended);\n\t};\n\t\n\tconst link = svg.append('g')\n\t\t.selectAll<SVGLineElement, GraphLink[]>('line')\n\t\t.data(links)\n\t\t.join('line')\n\t\t.attr('stroke', 'grey')\n\t\t.attr('stroke-opacity', LINE_STROKE_OPACITY_SECONDARY)\n\t\t.attr('stroke-width', LINE_STROKE_OPACITY_SECONDARY);\n\t\n\tconst node = svg.append('g')\n\t\t.selectAll<SVGCircleElement, GraphNode[]>('circle')\n\t\t.data(nodes)\n\t\t.join('circle')\n\t\t.attr('r', CIRCLE_RADIUS)\n\t\t.attr('stroke', circleStroke)\n\t\t.attr('stroke-width', 1)\n\t\t.attr('fill', color)\n\t\t.call(drag(simulation));\n\n\tsimulation.on('tick', () => {\n\t\t// need to cast these optional GraphNode interface fields because D3 adds/transforms them\n\t\t// after graph initialization, but on the initial graph data generation and for unit-tests\n\t\t// for algorithms these fields are not needed\n\t\tlink\n\t\t\t.attr('x1', d => (d.source as GraphNode).x as number)\n\t\t\t.attr('y1', d => (d.source as GraphNode).y as number)\n\t\t\t.attr('x2', d => (d.target as GraphNode).x as number)\n\t\t\t.attr('y2', d => (d.target as GraphNode).y as number);\n\n\t\tnode\n\t\t\t.attr('cx', d => d.x as number)\n\t\t\t.attr('cy', d => d.y as number);\n\t});\n\n\tnode.append('title')\n\t\t.text(d => d.id);\n\n\tconst unmountGraph = () => {\n\t    simulation.stop();\n\t    node.on('drag', null);\n\t    d3.select('svg.graph-svg').remove();\n  \t}\n\n\treturn { svg, node, link, nodes, links, linksMap, targetNode: nodes[targetNodeId], unmountGraph };\n}\n","import { GraphNode } from '../graph/interfaces/GraphNode.interface';\nimport { Graph } from '../graph/Graph.class';\nimport { Flag } from '../graph/Flag.enum';\nimport { FindPathProgressiveSignature } from './signatures/FindPathSignature';\n\nexport function depthFirstSearchProgressive(): FindPathProgressiveSignature {\n\t// wrapper function is needed for creating\n\t// a closure for hasFoundPath variable\n\t// to use it later inside the algorithm function\n\t\n\t// after this variable is updated, it toggles the condition inside the scope of\n\t// all the functions existing currently in the call stack from recursion,\n\t// to determine whether to continue executing recursive search or not\n\tlet hasFoundPath = false;\n\treturn function* _depthFirstSearchProgressive(this: Graph, node: GraphNode, prevNode?: GraphNode): Generator {\n\t\t// pre-order flag\n\t\tyield this.flag(node, prevNode, Flag.isVisited);\n\n\t\tif (node.isTarget) {\n\t\t\thasFoundPath = true;\n\t\t}\n\n\t\tconst currentNodeId = node.id;\n\n\t\tlet newNode = undefined;\n\n\t\tfor (let i = 0; i < this.STEPS.length && !hasFoundPath; i++) {\n\t\t\tnewNode = this.nodes[currentNodeId + this.STEPS[i]];\n\t\t\tif (this.canVisit(newNode, node, this.STEPS[i])) {\n\t\t\t\tyield* _depthFirstSearchProgressive.apply(this, [newNode, node]);\n\t\t\t}\n\t\t}\n\n\t\t// post-order flag\n\t\tif (hasFoundPath) {\n\t\t\tif (node.isTarget) {\n\t\t\t\tyield this.flag(node, undefined, Flag.isPath);\n\t\t\t} else {\n\t\t\t\tyield this.flag(node, newNode, Flag.isPath);\n\t\t\t}\n\t\t} else {\n\t\t\tyield this.flag(node, prevNode, Flag.isBlocked);\n\t\t}\n\n\t\treturn hasFoundPath; // for callback message\n\t}\n}\n","import { Graph } from '../graph/Graph.class';\nimport { GraphNode } from '../graph/interfaces/GraphNode.interface';\nimport { Flag } from '../graph/Flag.enum';\n\n// todo: add test for this algo\nexport function depthFirstSearchStatic(this: Graph, node: GraphNode, prevNode?: GraphNode, step?: number): boolean {\n\tif (!this.canVisit(node, prevNode, step)) {\n\t\treturn false;\n\t}\n\n\tconst currentNodeId = node.id;\n\n\t// pre-order flag\n\tthis.flag(node, prevNode, Flag.isVisited);\n\n\tif (node.isTarget) {\n\t\tthis.flag(node, prevNode, Flag.isVisited);\n\t\tthis.flag(node, prevNode, Flag.isPath);\n\t\treturn true;\n\t}\n\n\tfor (let i = 0; i < this.STEPS.length; i++) {\n\t\tconst currentStep = this.STEPS[i];\n\t\tif (depthFirstSearchStatic.apply(this, [this.nodes[currentNodeId + currentStep], node, currentStep])) {\n\t\t\t// post-order flag\n\t\t\tthis.flag(node, prevNode, Flag.isPath);\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\t/**\n\t * leaving this more explicit version of the code\n\t * before refactoring it to the above for-loop,\n\t * to better understand how it works\n\tif (\n\t\t_depthFirstSearchStatic(this.nodes[currentNodeId + 1], node, 1)\n\t\t|| _depthFirstSearchStatic(this.nodes[currentNodeId + GRAPH_SIDE_LENGTH], node, GRAPH_SIDE_LENGTH)\n\t\t|| _depthFirstSearchStatic(this.nodes[currentNodeId - 1], node, -1)\n\t\t|| _depthFirstSearchStatic(this.nodes[currentNodeId - GRAPH_SIDE_LENGTH], node, -GRAPH_SIDE_LENGTH)\n\t) {\n\t\tthis.flag(node, prevNode, Flag.isPath);\n\t\treturn true;\n\t}\n\t **/\n\n\t// post-order flag\n\tthis.flag(node, prevNode, Flag.isBlocked);\n\treturn false;\n}\n","import { ReactNode } from 'react';\nimport { SearchType } from '../common-types/SearchType.enum';\n\ntype LegendProps = {\n\tisProgressive: boolean,\n\tsearchType?: SearchType,\n\tisCompetition?: boolean,\n\tisEdgeCase?: boolean\n};\n\ntype LegendKind = 'is-unvisited'\n\t| 'is-obstacle'\n\t| 'is-visited'\n\t| 'is-blocked'\n\t| 'is-path'\n\t| 'is-target'\n\t| 'is-path-target'\n\t| 'is-visited-root'\n\t| 'is-blocked-root';\n\ntype LegendItem = {\n\ttype: LegendKind,\n\ttext: string,\n\ttitle?: string\n};\n\nexport function Legend(props: LegendProps) {\n\tconst { searchType, isProgressive = true, isCompetition, isEdgeCase } = props;\n\n\tconst itemsRaw: LegendItem[] = [\n\t\t{type: 'is-unvisited', text: 'Unvisited'},\n\t\t{type: 'is-obstacle', text: 'Obstacle'},\n\t\t{type: 'is-visited', text: 'Visited'},\n\t\t{type: 'is-blocked', text: 'Cul-de-sac (Dfs only)', title: 'Node or link that has been visited, but hasn\\'t led to the target node' },\n\t\t{type: 'is-path', text: 'Path'},\n\t\t{type: 'is-target', text: 'Root/Target'},\n\t\t{type: 'is-path-target', text: 'Path Root/Target'},\n\t\t{type: 'is-visited-root', text: 'Visited Root/Target'},\n\t\t{type: 'is-blocked-root', text: 'Cul-de-sac Root (Dfs only)'}\n\t];\n\n\tconst isOnlyForStaticDfs = (type: string) => {\n\t\treturn type !== 'is-visited' && type !== 'is-visited-root';\n\t};\n\n\tconst isOnlyForBfs = (type: string) => {\n\t\treturn type !== 'is-blocked' && type !== 'is-blocked-root';\n\t};\n\t\n\tconst legendItemsRaw: LegendItem[] = itemsRaw.filter(({ type }: LegendItem) => {\n\t\tif (isCompetition) {\n\t\t\tif (isEdgeCase) {\n\t\t\t\treturn isOnlyForBfs(type) && type !== 'is-obstacle';\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tif (searchType === 'DFS') {\n\t\t\tif (isProgressive) return true;\n\t\t\treturn isOnlyForStaticDfs(type);\n\t\t} else {\n\t\t\tif (isProgressive) return isOnlyForBfs(type);\n\t\t\treturn isOnlyForBfs(type);\n\t\t}\n\t});\n\t\n\tconst legendItems: ReactNode[] = legendItemsRaw.map<ReactNode>((legendItem: LegendItem, i) => {\n\t\tconst { type, text, title } = legendItem;\n\t\treturn (\n\t\t\t<li key={i} className=\"legend-item\" title={title || ''}>\n\t\t\t\t<span className={`circle ${type}`} />\n\t\t\t\t<span className=\"text\">{text}</span>\n\t\t\t</li>\n\t\t);\n\t});\n\t\n\treturn (\n\t\t<section className=\"legend\">\n\t\t\t<ul className={`legend-list${isEdgeCase ? ' is-edge-case' : ''}`}>\n\t\t\t\t{legendItems}\n\t\t\t</ul>\n\t\t</section>\n\t);\n}\n","import { GraphSection } from '../components/GraphSection';\nimport { routes } from '../configs/routes';\nimport { depthFirstSearchProgressive } from '../algos/dfs-progressive-algo';\nimport { depthFirstSearchStatic } from '../algos/dfs-static-algo';\nimport { Legend } from '../components/Legend';\nimport { SearchType } from '../common-types/SearchType.enum';\nimport { AlgoPageProps } from './types/AlgoPage.type';\n\nexport function DepthFirstSearchPage(props: AlgoPageProps) {\n  const {\n    graphData,\n    isProgressive = true,\n    isCompetition = false,\n    speed\n  } = props;\n\n  let extraProps;\n\n  if (isProgressive) {\n    extraProps = {\n      searchFunction: depthFirstSearchProgressive,\n      isDfsGenerator: true,\n      speed\n    };\n  } else {\n    extraProps = {\n      isProgressive: false,\n      searchFunction: depthFirstSearchStatic\n    };\n  }\n\n  return(\n    <>\n      <GraphSection\n          title=\"Depth First Search\"\n          graphData={graphData}\n          isCompetition={isCompetition}\n          routes={routes.dfs}\n          searchType={SearchType.DFS}\n          {...extraProps}\n      />\n      {!isCompetition\n        && <Legend searchType={SearchType.DFS} isProgressive={isProgressive} />}\n    </>\n  );\n}\n","import { GraphNode } from '../graph/interfaces/GraphNode.interface';\nimport { Graph } from '../graph/Graph.class';\nimport { Flag } from '../graph/Flag.enum';\nimport { VisitChildrenSignature } from './helpers/visit-children-bfs';\n\nexport function* breadthFirstSearchProgressive(this: Graph, node: GraphNode): Generator {\n\t// because there is no recursion here\n\t// we can cache the references to thisGraph fields\n\tconst nodes = this.nodes;\n\tconst targetNode = this.targetNode;\n\t\n\t// traverse nodes\n\tlet hasFoundPath = false;\n\tconst queue: GraphNode[] = [];\n\t\n\tthis.flag(node, undefined, Flag.isVisited);\n\tqueue.push(node);\n\t\n\twhile (queue.length > 0 && !hasFoundPath) {\n\t\tconst parentNode = queue.shift() as GraphNode;\n\t\thasFoundPath = (this.visitChildren as VisitChildrenSignature)(parentNode, queue);\n\t\tyield hasFoundPath;\n\t}\n\t\n\t// reconstruct path\n\tif (targetNode.isVisited) {\n\t\tfor (\n\t\t\tlet element = nodes[this.targetNode.id];\n\t\t\t!!element && !!nodes[element.parentId as number];\n\t\t\telement = nodes[element.parentId as number]\n\t\t) {\n\t\t\tif (element.isTarget) {\n\t\t\t\tyield this.flag(element, undefined, Flag.isPath);\n\t\t\t\tyield this.flag(nodes[element.parentId as number], element, Flag.isPath);\n\t\t\t} else {\n\t\t\t\tyield this.flag(nodes[element.parentId as number], element, Flag.isPath);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn hasFoundPath; // for callback message\n}\n","import { GraphNode } from '../graph/interfaces/GraphNode.interface';\nimport { Graph } from '../graph/Graph.class';\nimport { Flag } from '../graph/Flag.enum';\nimport { VisitChildrenSignature } from './helpers/visit-children-bfs';\n\n// todo: add test for this algo\nexport function breadthFirstSearchStatic(this: Graph, node: GraphNode): boolean {\n\t// because there is no recursion here\n\t// we can cache the references to thisGraph fields\n\tconst nodes = this.nodes;\n\tconst targetNode = this.targetNode;\n\t\n\t// traverse nodes\n\tlet hasFoundPath = false;\n\tconst queue: GraphNode[] = [];\n\t\n\tthis.flag(node, undefined, Flag.isVisited);\n\tqueue.push(node);\n\t\n\twhile (queue.length > 0 && !hasFoundPath) {\n\t\tconst parentNode = queue.shift() as GraphNode;\n\t\thasFoundPath = (this.visitChildren as VisitChildrenSignature)(parentNode, queue);\n\t}\n\t\n\t// reconstruct path\n\tif (targetNode.isVisited) {\n\t\tfor (let element = nodes[targetNode.id]; !!element; element = nodes[element.parentId as number]) {\n\t\t\tthis.flag(element, nodes[element.parentId as number], Flag.isPath);\n\t\t}\n\t}\n\t\n\treturn hasFoundPath;\n}\n","import { GraphSection } from '../components/GraphSection';\nimport { routes } from '../configs/routes';\nimport { breadthFirstSearchProgressive } from '../algos/bfs-progressive-algo';\nimport { breadthFirstSearchStatic } from '../algos/bfs-static-algo';\nimport { Legend } from '../components/Legend';\nimport { SearchType } from '../common-types/SearchType.enum';\nimport { AlgoPageProps } from './types/AlgoPage.type';\n\nexport function BreadthFirstSearchPage(props: AlgoPageProps) {\n  const {\n    graphData,\n    isProgressive = true,\n    isCompetition,\n    speed\n  } = props;\n\n  let extraProps;\n\n  if (isProgressive) {\n    extraProps = {\n      searchFunction: breadthFirstSearchProgressive,\n      speed\n    };\n  } else {\n    extraProps = {\n      isProgressive: false,\n      searchFunction: breadthFirstSearchStatic\n    };\n  }\n\n  return(\n    <>\n      <GraphSection\n        title=\"Breadth First Search\"\n        graphData={graphData}\n        isCompetition={isCompetition}\n        routes={routes.bfs}\n        searchType={SearchType.BFS}\n        {...extraProps}\n      />\n      {!isCompetition\n        && <Legend searchType={SearchType.BFS} isProgressive={isProgressive} />}\n    </>\n  );\n}\n","import React, { ReactNode } from 'react';\nimport { Link } from 'react-router-dom';\nimport { StockOutlined, FundOutlined } from '@ant-design/icons';\n\ntype LinkItem = {\n\turl: string,\n\ttext: string,\n\tisProgressive?: boolean,\n\tisEdgeCase?: boolean\n};\n\nexport function AboutPage() {\n\tconst description = (isProgressive = true, isEdgeCase = false) => {\n\t\tconst icon = isProgressive ? <StockOutlined /> : <FundOutlined />;\n\t\treturn(\n\t\t\t<>\n\t\t\t\t{icon}{' '}\n\t\t\t\t{isProgressive ? 'Asynchronous gradual' : 'Synchronous immediate'} execution;<br />\n\t\t\t\t<span style={{whiteSpace: 'nowrap'}}>\n\t\t\t\t\t<span className=\"circle is-target\" />\n\t\t\t\t\t{isEdgeCase\n\t\t\t\t\t\t? 'Target node is fixed (to spotlight the edge case)'\n\t\t\t\t\t\t: 'Target node is random'};\n\t\t\t\t</span>\n\t\t\t\t<br />\n\t\t\t\t<span style={{whiteSpace: 'nowrap'}}>\n\t\t\t\t\t<span className=\"circle is-obstacle\" />\n\t\t\t\t\t{isEdgeCase\n\t\t\t\t\t\t? 'No obstacle nodes'\n\t\t\t\t\t\t: 'Obstacle nodes are random'}.\n\t\t\t\t</span>\n\t\t\t</>\n\t\t);\n\t};\n\n\tconst linkItemsRaw: LinkItem[] = [\n\t\t{ url: '/dfs/progressive', text: 'Depth-first search (progressive)' },\n\t\t{ url: '/dfs/static', text: 'Depth-first search (static)', isProgressive: false },\n\t\t{ url: '/bfs/progressive', text: 'Breadth-first search (progressive)' },\n\t\t{ url: '/bfs/static', text: 'Breadth-first search (static)', isProgressive: false },\n\t\t// competition pages\n\t\t{ url: '/dfs-vs-bfs/progressive', text: 'Dfs versus Bfs (progressive)' },\n\t\t{ url: '/dfs-vs-bfs/static', text: 'Dfs versus Bfs (static)', isProgressive: false },\n\t\t{ url: '/dfs-vs-bfs/edge-case-a', text: 'Dfs versus Bfs (edge case 1)', isEdgeCase: true },\n\t\t{ url: '/dfs-vs-bfs/edge-case-b', text: 'Dfs versus Bfs (edge case 2)', isEdgeCase: true }\n\t];\n\n\tconst linkItems: ReactNode[] = linkItemsRaw.map<ReactNode>((linkItem: LinkItem, i) => {\n\t\tconst { url, text, isProgressive = true, isEdgeCase = false } = linkItem;\n\t\treturn(\n\t\t\t<li key={i} className=\"article-list-item\">\n\t\t\t\t{'- '}\n\t\t\t\t<Link to={{ pathname: url, state: { scrollToTop: true } }} className=\"article-list-item-link\">\n\t\t\t\t\t{text}\n\t\t\t\t</Link>\n\t\t\t\t<br />\n\t\t\t\t{description(isProgressive, isEdgeCase)}\n\t\t\t</li>\n\t\t);\n\t});\n\n\treturn (\n\t\t<section className=\"about-section\">\n\t\t\t<h2 className=\"title\">Onboarding</h2>\n\t\t\t<article className=\"article\">\n\t\t\t\t<p>\n\t\t\t\t\tDepth-first search and breadth-first search are the fundamental algorithms used for graphs search.\n\t\t\t\t\tThey can be applied either by themselves or as building blocks for more complicated algorithms.\n\t\t\t\t\tUnderstanding how they work adds to your overall programming knowledge,\n\t\t\t\t\thelps to sharpen coding skills and gives food for inspiration to create fascinating visualizations.\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tIt is a fact that to better understand a big concept, it is wise to break it into smaller pieces, or subconcepts.\n\t\t\t\t\tAnd then after you comprehend all of them, you can combine this knowledge puzzle together\n\t\t\t\t\tand get the gist of the whole concept. Similarly like recursion works.\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tSo to really familiarize myself with Dfs and Bfs, I decided to implement the browser visualization\n\t\t\t\t\tof these algorithms with an accent on their progress. I wanted to focus on showing “live” how they flow\n\t\t\t\t\tthrough the steps, apart from just getting the final result. This way it is much easier\n\t\t\t\t\tto grasp the essence of an algorithm as a whole. I also think that graph search algorithms\n\t\t\t\t\tare very welcoming to such kind of visual approach because of their nature.\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tFor the main graphic system I've chosen svg and D3.js library,\n\t\t\t\t\tbecause I wanted to experiment with D3.js force-graphs and\n\t\t\t\t\tuse them as a ground for the algorithms action.\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tApart from D3.js, it happened that during the course of this work I had gathered many of the\n\t\t\t\t\tseemingly intimidating (but core, and{' '}\n\t\t\t\t\t<a href=\"https://github.com/getify/You-Dont-Know-JS\" target=\"_blank\" rel=\"noreferrer noopener\">\n\t\t\t\t\t\tunderstandable\n\t\t\t\t\t</a>)\n\t\t\t\t\tparts and patterns of JavaScript in one project, that included closures, prototypes, generators,\n\t\t\t\t\trecursions and object mutations. As well as they were just the right tools for the job,\n\t\t\t\t\tit was an opportunity to refresh the basics and discover some new tricky nuances.\n\t\t\t\t\tFor the host environment I chose React, that also pushed me to dig deeper into\n\t\t\t\t\tits core concepts as well (components as functions, hooks).\n\t\t\t\t</p>\n\t\t\t\t<br />\n\t\t\t\t<p><b>D3.js + React</b></p>\n\t\t\t\t<p>\n\t\t\t\t\tBecause svg-graphs are generated here by pure D3.js,\n\t\t\t\t\tthere have been few challenges integrating them with React.\n\t\t\t\t\tFirstly, to enjoy D3.js native features, such as physical force simulation,\n\t\t\t\t\tit was necessary to append the svgs into the DOM via React ref prop,\n\t\t\t\t\tso that their internal state would be independent of React and managed solely by D3.js.\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tSecondly, due to that, updates of svg-graphs on every tick\n\t\t\t\t\tare implemented without triggering React rerenders\n\t\t\t\t\tvia useState, but are done inside component’s initial useEffect\n\t\t\t\t\tby mutating nodes and links objects and then applying this renewed data to the svg on every tick\n\t\t\t\t\t(for static examples, data is being modified synchronously in one step before applying changes to the svg).\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tThough mutating state objects is generally recommended avoiding,\n\t\t\t\t\tor at least using responsibly and mindfully in JavaScript to prevent unexpected bugs\n\t\t\t\t\t(especially in the realm of React), in this project it was intentional\n\t\t\t\t\tdue to the need to modify svg-graphs' state that lacked direct React participation.\n\t\t\t\t\tReact here only controls the initial mounting, unmounting of the svg-graphs\n\t\t\t\t\t(clearing all the intervals and removing svg-elements from the DOM)\n\t\t\t\t\tas well as reinserting new svg-graphs via ref prop\n\t\t\t\t\t(on page change, on theme change or just on graph reload).\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tThirdly, in competition pages where two identical sets of data are being used\n\t\t\t\t\t(to highlight the differences between Dfs and Bfs),\n\t\t\t\t\tthere have been a need to create two separate copies of nodes and links objects array\n\t\t\t\t\tvia JSON.parse(JSON.stringify(data)) to prevent \"race condition\".\n\t\t\t\t\tDespite looking hacky, this way of cloning objects ensures\n\t\t\t\t\tthat the copies are saved separately in memory,\n\t\t\t\t\tand when two algorithms start execution in parallel (UI-wise)\n\t\t\t\t\ton the same page, the data sets can be modified independently of each other.\n\t\t\t\t</p>\n\t\t\t\t<br />\n\t\t\t\t<p><b>Generators</b></p>\n\t\t\t\t<p>\n\t\t\t\t\tGradual asynchronous execution of depth-first search and breadth-first search algorithms was implemented\n\t\t\t\t\twith the help of one of the trickiest features of JavaScript, that is generators,\n\t\t\t\t\twhich turned out to be a perfect fit for such kind of task (requiring non-blocking the event-loop\n\t\t\t\t\tand demanding the browser rerender on every interval tick as algorithms move forward).\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tI was glad to dig deeper into generators, because they come up quite rarely\n\t\t\t\t\ton a day-to-day basis, thereby definitely leaving room for mastering them.\n\t\t\t\t\tSo, after exercising my troubleshooting and debugging skills intensely a few times\n\t\t\t\t\t(especially when combining generators with recursion - for depth-first search),\n\t\t\t\t\tI could eventually harness their powerful features.\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tNow generators look much more friendly to me,\n\t\t\t\t\tthus becoming just one of the useful tools under the belt\n\t\t\t\t\tthat a certain task can be solved with.\n\t\t\t\t</p>\n\t\t\t\t<br />\n\t\t\t\t<p>That being said, here is a map of all the pages with different depth-first search and breadth-first search examples:</p>\n\t\t\t\t<ul className=\"article-list has-links\">\n\t\t\t\t\t{linkItems.slice(0, 4)}\n\t\t\t\t</ul>\n\t\t\t\t<br />\n\t\t\t\t<p>\n\t\t\t\t\tCompetition pages. To comprehend the differences between Dfs and Bfs,\n\t\t\t\t\tit is really helpful to observe how they flow side by side:\n\t\t\t\t</p>\n\t\t\t\t<ul className=\"article-list has-links\">\n\t\t\t\t\t{linkItems.slice(4)}\n\t\t\t\t</ul>\n\t\t\t</article>\n\t\t</section>\n\t);\n}\n","import React, { useEffect, useState, useContext } from 'react';\nimport { Button } from 'antd';\nimport { ReloadOutlined } from '@ant-design/icons';\nimport { ThemeContext } from '../configs/context';\nimport { routes } from '../configs/routes';\nimport { generateGraphData } from '../graph/generate-graph-data';\nimport { Navigation } from '../components/Navigation';\nimport { DepthFirstSearchPage } from './DfsPage';\nimport { BreadthFirstSearchPage } from './BfsPage';\nimport { Legend } from '../components/Legend';\nimport { SearchType } from '../common-types/SearchType.enum';\nimport { CompetitionPageProps } from './types/CompetitionPage.type';\n\nexport function CompetitionPage(props: CompetitionPageProps) {\n  const [ triggerRerender, setTriggerRerender ] = useState(0);\n  const { isDark } = useContext(ThemeContext);\n\n  const { isEdgeCase = false, isProgressive = true, hasObstacles = true, speed } = props;\n\n  const graphData = generateGraphData(props.targetNodeId, hasObstacles);\n  const { nodes, links } = graphData;\n  const targetNodeId = props.targetNodeId || graphData.targetNodeId;\n\n  const reloadGraph = () => {\n    setTriggerRerender(triggerRerender => ++triggerRerender);\n  };\n\n  useEffect(() => {}, [triggerRerender]);\n\n  const renderGraphs = () => {\n    if (isProgressive) {\n      return(\n        <>\n          <DepthFirstSearchPage showLegend={false} isCompetition={true} graphData={{\n            nodes: JSON.parse(JSON.stringify(nodes)),\n            links: JSON.parse(JSON.stringify(links)),\n            targetNodeId\n          }} searchType={SearchType.DFS} speed={speed} />\n          <BreadthFirstSearchPage showLegend={false} isCompetition={true} graphData={{\n            nodes: JSON.parse(JSON.stringify(nodes)),\n            links: JSON.parse(JSON.stringify(links)),\n            targetNodeId\n          }} searchType={SearchType.BFS} speed={speed} />\n        </>\n      );\n    }\n\n    return(\n      <>\n        <DepthFirstSearchPage isProgressive={false} showLegend={false} isCompetition={true} graphData={{\n          nodes: JSON.parse(JSON.stringify(nodes)),\n          links: JSON.parse(JSON.stringify(links)),\n          targetNodeId\n        }} searchType={SearchType.DFS} />\n        <BreadthFirstSearchPage isProgressive={false} showLegend={false} isCompetition={true} graphData={{\n          nodes: JSON.parse(JSON.stringify(nodes)),\n          links: JSON.parse(JSON.stringify(links)),\n          targetNodeId\n        }} searchType={SearchType.BFS} />\n      </>\n    );\n  };\n\n  return(\n    <>\n      <section className=\"competition\">\n        <h1 className=\"title\">\n          DFS-vs-BFS\n          <Button\n              type=\"primary\"\n              ghost={!isDark}\n              size=\"small\"\n              className=\"btn-reload\"\n              icon={<ReloadOutlined />}\n              onClick={reloadGraph}\n          >\n            Reload\n          </Button>\n        </h1>\n        <Navigation routes={routes.dfsVsBfs} />\n        <div className=\"competition-graphs\">\n          {renderGraphs()}\n        </div>\n      </section>\n      <Legend isCompetition={true} isProgressive={isProgressive} isEdgeCase={isEdgeCase} />\n    </>\n  );\n}\n","type ThemeLocalStorage = {\n  isDark: boolean,\n  setIsDark: (isDark: boolean) => void\n};\n\nexport function themeLocalStorage(): ThemeLocalStorage {\n  return {\n    get isDark() {\n      return localStorage && localStorage.getItem('visualgos_is_dark') !== \"false\"; // localStorage only works with strings\n    },\n    setIsDark(isDark: boolean) {\n      localStorage && localStorage.setItem('visualgos_is_dark', `${isDark}`);\n    }\n  }\n}\n","import { Component } from 'react';\n\n// because React error boundaries only catch errors that occur during rendering,\n// catching and handling errors for asynchronous dfs and bfs algos will be done separately\n// todo: add error handling for asynchronous functions\nexport class ErrorBoundary extends Component {\n  state = { hasError: false };\n\n  static getDerivedStateFromError() {\n    return { hasError: true };\n  }\n\n  componentDidCatch() {\n    const bodyEl = document.getElementsByTagName('body')[0];\n    bodyEl.className = !bodyEl.className.match(/has-error/)\n      ? bodyEl.className += ' has-error' : bodyEl.className;\n  }\n\n  render() {\n    const { hasError } = this.state;\n    if (hasError) {\n      return(\n        <main className=\"main\">\n          <h2 className=\"error-title\">Application has encountered an error during rendering</h2>\n          <h3 className=\"error-sub-title\">The error is under investigation, and is soon going to be fixed</h3>\n          <p>Meanwhile, you can try to <a href=\"/\">{' '}go to the main page</a>.</p>\n        </main>\n      );\n    }\n    return this.props.children;\n  }\n}\n","import * as React from 'react';\nimport { useState, useEffect } from 'react';\nimport { HashRouter, Switch, Route, Redirect } from 'react-router-dom';\nimport { Button } from 'antd';\nimport { BulbFilled } from '@ant-design/icons';\nimport { Navigation } from './components/Navigation';\nimport { routes } from './configs/routes';\nimport { GRAPH_SIDE_LENGTH, SPEED_FAST } from './configs/parameters';\nimport { DepthFirstSearchPage } from './pages/DfsPage';\nimport { BreadthFirstSearchPage } from './pages/BfsPage';\nimport { AboutPage } from './pages/AboutPage';\nimport { CompetitionPage } from './pages/CompetitionPage';\nimport { ThemeContext } from './configs/context';\nimport { themeLocalStorage } from './utils/theme-local-storage';\nimport { ErrorBoundary } from './components/ErrorBoundary';\n\nfunction App() {\n  const [ isDark, setIsDark ] = useState(themeLocalStorage().isDark);\n  \n  const handleDarkTheme = () => {\n    setIsDark(prevIsDark => !prevIsDark);\n  };\n\n  useEffect(() => {\n    themeLocalStorage().setIsDark(isDark);\n  }, [isDark]);\n\n  // variable is used only for one competition edge case\n  const lastNodeId = GRAPH_SIDE_LENGTH * GRAPH_SIDE_LENGTH - 1;\n\n  return (\n    <ThemeContext.Provider value={{ isDark }}>\n      <div className={`container${isDark ? ' dark-mode' : ''}`}>\n        <ErrorBoundary>\n          <HashRouter>\n            <header className=\"header\">\n              <Button\n                  type=\"primary\"\n                  ghost={isDark}\n                  size=\"small\"\n                  className=\"btn-theme\"\n                  title=\"Set dark theme\"\n                  onClick={handleDarkTheme}\n              >\n                <BulbFilled style={{color: isDark ? '#fff' : '#3a3f41'}} />\n                Go{isDark ? ' light' : ' dark'}\n              </Button>\n              <Navigation routes={routes.main} isMain={true} />\n            </header>\n            <main className=\"main\">\n              <Switch>\n                <Route path=\"/dfs/progressive\" >\n                  <DepthFirstSearchPage />\n                </Route>\n                <Route path=\"/dfs/static\">\n                  <DepthFirstSearchPage isProgressive={false} />\n                </Route>\n                <Route path=\"/bfs/progressive\">\n                  <BreadthFirstSearchPage />\n                </Route>\n                <Route path=\"/bfs/static\">\n                  <BreadthFirstSearchPage isProgressive={false} />\n                </Route>\n                <Route path=\"/dfs-vs-bfs/progressive\">\n                  <CompetitionPage />\n                </Route>\n                <Route path=\"/dfs-vs-bfs/static\">\n                  <CompetitionPage isProgressive={false} />\n                </Route>\n                <Route path=\"/dfs-vs-bfs/edge-case-a\">\n                  <CompetitionPage isEdgeCase={true} targetNodeId={20} hasObstacles={false} speed={SPEED_FAST} />\n                </Route>\n                <Route path=\"/dfs-vs-bfs/edge-case-b\">\n                  <CompetitionPage isEdgeCase={true} targetNodeId={lastNodeId} hasObstacles={false} speed={SPEED_FAST} />\n                </Route>\n                <Route path=\"/onboarding\">\n                  <AboutPage />\n                </Route>\n                <Route path=\"/\">\n                  <Redirect to=\"/dfs/progressive\" />\n                </Route>\n              </Switch>\n            </main>\n          </HashRouter>\n        </ErrorBoundary>\n      </div>\n    </ThemeContext.Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.less';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.less';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}